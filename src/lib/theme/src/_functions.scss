@use 'sass:math';

@function pxToRem($value) {
	$rem: calc($value / 16) + rem;
	@return $rem;
}

@function strip-unit($number) {
	@if type-of($number)=='number' and not unitless($number) {
		@return math.div($number, $number * 0 + 1);
	}

	@return $number;
}

@function luminance($color) {
	// $linear-channel-values are our Lookup Table of constants
	$red: nth($linear-channel-values, red($color) + 1);
	$green: nth($linear-channel-values, green($color) + 1);
	$blue: nth($linear-channel-values, blue($color) + 1);
	$calculation: 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
	@return $calculation;
}

@function contrast-ratio($fg, $bg) {
	$luminance1: luminance($fg)+0.05;
	$luminance2: luminance($bg)+0.05;
	$ratio: calc($luminance1 / $luminance2);

	@if $luminance2 >$luminance1 {
		$ratio: calc(1 / $ratio);
	}

	// Round to a hundreth because 6.96 should not pass a ratio of 7.0
	$ratio: calc(round($ratio * 100) / 100);
	@return $ratio;
}

@function validate-font-size($size) {
	@if unit($size)=='em' or unit($size)=='rem' or unit($size)=='px' or unit($size)=='' {

		// Check if a flexible unit
		@if unit($size)=='em' or unit($size)=='rem' {
			// Need to convert to a pixel value. Let's not overcomplicate it with possible EM inheritence scale factors
			@return strip-unit($size * 16);
		}

		@if unit($size)=='px' {
			// We expect PX, so strip the value and return it
			@return strip-unit($size);
		}

		@if unit($size)=='' {
			@return $size;
		}
	}

	@else {
		@error 'validate-font-size(): An unexpected font size unit was supplied.';
	}
}

@function get-ratio($level: 'AA', $size: 16, $bold: false) {
	// Default ratio
	$ratio: 4.5;

	@if $level =='AAA' {
		$ratio: 7;
	}

	// Make sure the size is valid. If the value is not EM, REM, or PX (preferred), we can't help
	$size: validate-font-size($size);

	// Check font size
	@if $size < 24 {

		// Small text, use defaults
		// But:
		@if $size >=19 and $bold ==true {

			// Special case: Small text but also bold
			@if $level =='AAA' {
				$ratio: 4.5;
			}

			@else {
				$ratio: 3;
			}
		}
	}

	@else {
		// Larger than 24
		$ratio: 3;

		@if $level =='AAA' {
			$ratio: 4.5;
		}
	}

	@return $ratio;
}

@function light-or-dark($color) {
	$light-contrast: contrast-ratio($color, $white);
	$dark-contrast: contrast-ratio($color, $black);

	@if $light-contrast >$dark-contrast {
		// Contrast against white is higher than against black, so, this is a dark color
		@return 'dark';
	}

	@else {
		@return 'light';
	}
}

@function color-contrast($color) {
	$color-lod: light-or-dark($color);

	@if ($color-lod =='dark') {
		@return $white;
	}

	@else {
		@return $black;
	}
}

@function a11y-color($fg, $bg, $level: 'AA', $size: 16, $bold: false) {
	// Helper: make sure the font size value is acceptable
	$font-size: validate-font-size($size);
	// Helper: With the level, font size, and bold boolean, return the proper target ratio. 3.0, 4.5, or 7.0 expected
	$ratio: get-ratio($level, $font-size, $bold);
	// Calculate the first contrast ratio of the given pair
	$original-contrast: contrast-ratio($fg, $bg);

	@if $original-contrast >=$ratio {
		// If we pass the ratio already, return the original color
		@return $fg;
	}

	@else {
		// Doesn't pass. Time to get to work
		// Should the color be lightened or darkened?
		$fg-lod: light-or-dark($fg);
		$bg-lod: light-or-dark($bg);

		// Set a "step" value to lighten or darken a color
		// Note: Higher percentage steps means faster compile time, but we might overstep the required threshold too far with something higher than 4%
		$step: 1%;

		// Run through some cases where we want to darken, or use a negative step value
		@if $fg-lod =='light' and $bg-lod =='light' {
			// Both are light colors, darken the fg
			$step: -$step;
		}

		@else if $fg-lod =='dark' and $bg-lod =='light' {
			// bg is light, fg is dark but does not pass, darken more
			$step: -$step;
		}

		// Keeping the rest of the logic here, but our default values do not change, so this logic is not needed
		//@else if $fg-lod == 'light' and $bg-lod == 'dark' {
		//  // bg is dark, fg is light but does not pass, lighten further
		//  $step: $step;
		//} @else if $fg-lod == 'dark' and $bg-lod == 'dark' {
		//  // Both are dark, so lighten the fg
		//  $step: $step;
		//}

		// The magic happens here
		// Loop through with a @while statement until the color combination passes our required ratio. Scale the color by our step value until the expression is false
		// This might loop 100 times or more depending on the colors
		$original-fg: $fg;

		@while contrast-ratio($fg, $bg) < $ratio {
			$sat-step: 0%;

			@if $step < 100% {
				@if saturation($fg)>10 {
					$sat-step: $step;
				}

				$fg: scale-color($fg, $lightness: $step, $saturation: $sat-step);
			}

			@else {
				@warn 'The color has been darkened or lightened as much as possible and still will not meet the desired contrast ratio: #{$original-fg} vs. #{$bg}';
			}
		}

		@return $fg;
	}
}
@mixin fluid-type($font_size) {
	$min-vw: 320px;
	$max-vw: 1200px;
	$max-font-size: $font_size;
	$min-font-size: calc($font_size / 1.111111);

	$u1: unit($min-vw);
	$u2: unit($max-vw);
	$u3: unit($min-font-size);
	$u4: unit($max-font-size);

	@if $u1 ==$u2 and $u1 ==$u3 and $u1 ==$u4 {
		& {
			font-size: $min-font-size;

			// @media screen and (min-width: $min-vw) {
			// 	font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
			// }

			@media screen and (min-width: $max-vw) {
				font-size: $max-font-size;
			}

			@media only screen and (-webkit-min-device-pixel-ratio: 1.3),
				only screen and (-o-min-device-pixel-ratio: 13/10),
				only screen and (min-resolution: 120dpi) {
				font-size: calc(
					#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
						((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
				);
			}
		}
	}
}

@mixin generate-color-utilities($colors, $contrasts) {
	@each $key, $value in $colors {
		.text_#{$key} {
			color: $value;
		}

		.bg_#{$key} {
			background-color: $value;
			$fg: map-get($contrasts, $key);
			color: a11y-color($fg, $value);
		}

		.gradient_lg_#{$key}{
			background: linear-gradient(180deg, $value, white 60rem);
		}

		.gradient_sm_#{$key}{
			background: linear-gradient(180deg, $value, white 25rem);
		}
	}
}

@mixin generate-grid-system($breakpoints, $gutter) {
	$xs: 0;
	$sm: map-get($breakpoints, 'sm');
	$md: map-get($breakpoints, 'md');
	$lg: map-get($breakpoints, 'lg');
	$xl: map-get($breakpoints, 'xl');
	$xxl: map-get($breakpoints, 'xxl');

	@each $breakpoint, $value in $breakpoints {
		.show_on_#{$breakpoint}_and_down {
			@media (min-width: $value) {
				display: none !important;
			}
		}

		.show_on_#{$breakpoint}_and_up {
			@media (max-width: $value) {
				display: none !important;
			}
		}

		.hide_on_#{$breakpoint}_and_down {
			@media (max-width: $value) {
				display: none !important;
			}
		}

		.hide_on_#{$breakpoint}_and_up {
			@media (min-width: $value) {
				display: none !important;
			}
		}
	}

	.container {
		width: 100%;
		height: 100%;
		max-width: calc($xxl - $gutter);
		margin: 0 auto;
		padding: 0 $gutter;

		&_fluid {
			max-width: calc(100% - $gutter);
		}

		@media (max-width: $sm) {
			max-width: 100% !important;
		}

		@media (max-width: $xl) {
			max-width: calc(100% - ($gutter * 2));
		}

		.row {
			height: 100%;
			position: relative;
			display: flex;
			flex-wrap: wrap;
			justify-content: space-between;

			margin-left: calc($gutter * -1);
			margin-right: calc($gutter * -1);

			& [class^='col'] {
				float: left;
				min-height: 0.125rem;
			}

			.col {
				max-width: 100%;
				flex-basis: 0;
				flex-grow: 1;
				margin-top: 1rem;
				margin-bottom: 1rem;
				margin-left: auto;
				margin-right: auto;

				@for $i from 1 through 12 {
					&_#{$i} {
						flex: 0 calc($i / 12 * 100% - $gutter * 2);
					}

					@each $bp, $size in $breakpoints {
						&_#{$bp}_#{$i} {
							@media (max-width: $size) {
								flex: 0 calc($i / 12 * 100% - $gutter * 2);
							}
						}
					}
				}
			}
		}
	}
}

@mixin generate-dividers {
	.divider {
		display: block;
		height: 1px;
		background-color: #212121;

		@for $i from 1 through 4 {
			&_#{$i} {
				height: #{$i}px;
			}
		}

		@each $key, $value in $colors {
			&_#{$key} {
				background-color: $value;
			}
		}
	}
}

@mixin generate-utilities($utilities) {
	@each $name, $u in $utilities {
		$value: map-get($u, 'value');
		$class: map-get($u, 'class');
		$prop: map-get($u, 'prop');

		@if type-of($value) == 'string' or type-of(nth($value, 1)) != 'list' {
			$value: zip($value, $value);
		}

		@if type-of($prop) == 'string' {
			$prop: append((), $prop);
		}

		@each $k, $v in $value {
			.#{$class}_#{$k} {
				@each $p in $prop {
					#{$p}: $v;
				}
			}
		}
	}
}
